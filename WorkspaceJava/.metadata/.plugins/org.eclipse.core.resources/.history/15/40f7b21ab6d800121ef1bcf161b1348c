package VistasFinales;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.FlowLayout;
import java.awt.Toolkit;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import java.awt.Choice;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import java.awt.Font;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import com.mysql.jdbc.PreparedStatement;


import java.awt.SystemColor;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.awt.Color;
import java.io.IOException;

import javax.swing.SwingConstants;

import modelo.ModeloCrearMonitores;

import conexiones.*;

public class CrearMonitores extends JDialog {

	public final JPanel contentPanel = new JPanel();
	public JTextField textFieldDni;
	public JTextField textFieldNombre;
	public JTextField textFieldApellidos;
	public JTextField textFieldTeleefono;
	private JTextField txtCamposObligatorios;

	public JButton btnCrearMonitores;
	public JButton Salir;
	
	public JComboBox comboBoxTipo;
	
	JTable tableCursos;
	public ModeloCrearMonitores crearmonitor;
	
	Conexion conx= new Conexion();
	private JTextField textFieldCodCurso;
	
	public CrearMonitores() throws IOException, SQLException {
		setTitle("Crear Usuarios");
		setIconImage(Toolkit.getDefaultToolkit().getImage("src/Images/admin.png"));
		setModal(true);
		setUndecorated(true);
		setBounds(100, 100, 539, 389);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		setLocationRelativeTo(null);
		contentPanel.setLayout(null);
		JLabel lblDni = new JLabel("*  DNI:");
		lblDni.setForeground(Color.RED);
		lblDni.setBounds(24, 40, 114, 14);
		lblDni.setFont(new Font("Comic Sans MS", Font.BOLD, 13));
		contentPanel.add(lblDni);
		
		
		crearmonitor=new ModeloCrearMonitores();
		
		textFieldDni = new JTextField();
		textFieldDni.setHorizontalAlignment(SwingConstants.CENTER);
		textFieldDni.setBounds(148, 40, 140, 20);
		textFieldDni.setBorder(new LineBorder(SystemColor.inactiveCaptionText, 1, true));
		contentPanel.add(textFieldDni);
		textFieldDni.setColumns(10);
		
		JLabel lblNombre = new JLabel("Nombre:");
		lblNombre.setForeground(Color.BLACK);
		lblNombre.setBounds(24, 71, 114, 14);
		lblNombre.setFont(new Font("Comic Sans MS", Font.BOLD, 13));
		contentPanel.add(lblNombre);
		
		
		textFieldNombre = new JTextField();
		textFieldNombre.setHorizontalAlignment(SwingConstants.CENTER);
		textFieldNombre.setBounds(148, 71, 140, 20);
		textFieldNombre.setBorder(new LineBorder(SystemColor.inactiveCaptionText, 1, true));
		contentPanel.add(textFieldNombre);
		textFieldNombre.setColumns(10);
		
		JLabel lblApellidos = new JLabel("Apellidos:");
		lblApellidos.setForeground(Color.BLACK);
		lblApellidos.setBounds(24, 102, 114, 14);
		lblApellidos.setFont(new Font("Comic Sans MS", Font.BOLD, 13));
		contentPanel.add(lblApellidos);
		
		textFieldApellidos = new JTextField();
		textFieldApellidos.setHorizontalAlignment(SwingConstants.CENTER);
		textFieldApellidos.setBounds(148, 102, 140, 20);
		textFieldApellidos.setBorder(new LineBorder(SystemColor.inactiveCaptionText, 1, true));
		contentPanel.add(textFieldApellidos);
		textFieldApellidos.setColumns(10);
		
		JLabel lblTeleefono = new JLabel("* Telefono:");
		lblTeleefono.setHorizontalAlignment(SwingConstants.LEFT);
		lblTeleefono.setForeground(Color.RED);
		lblTeleefono.setBounds(24, 133, 114, 14);
		lblTeleefono.setFont(new Font("Comic Sans MS", Font.BOLD, 13));
		contentPanel.add(lblTeleefono);
		
		textFieldTeleefono = new JTextField();
		textFieldTeleefono.setHorizontalAlignment(SwingConstants.CENTER);
		textFieldTeleefono.setBounds(148, 133, 140, 20);
		textFieldTeleefono.setBorder(new LineBorder(SystemColor.inactiveCaptionText, 1, true));
		contentPanel.add(textFieldTeleefono);
		textFieldTeleefono.setColumns(10);
		
		JLabel lblNomina = new JLabel("*Nomina");
		lblNomina.setForeground(Color.RED);
		lblNomina.setBounds(24, 165, 114, 14);
		lblNomina.setFont(new Font("Comic Sans MS", Font.BOLD, 13));
		contentPanel.add(lblNomina);
		
		btnCrearMonitores = new JButton("A\u00F1adir");
		btnCrearMonitores.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnCrearMonitores.setMnemonic('a');
		btnCrearMonitores.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnCrearMonitores.setBounds(24, 304, 120, 31);
		btnCrearMonitores.setIcon(new ImageIcon("src/images/confirm.png"));
		contentPanel.add(btnCrearMonitores);
		
		//LLAMADA AL CONTROLADOR CREARMONITORES
		btnCrearMonitores.addActionListener(new ActionListener(){
			public void actionPerformed (ActionEvent o){
				btnCrearMonitoresActionPerformed(o);
			}
		});
		
		
		Salir = new JButton("Cancelar");
		Salir.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		Salir.setMnemonic('c');
		Salir.setBounds(168, 304, 120, 31);
		Salir.setIcon(new ImageIcon("src/images/adiooos.png"));
		contentPanel.add(Salir);
		
		Salir.addActionListener(new ActionListener(){
			public void actionPerformed (ActionEvent o){
				SalirActionPerformed(o);
			}
			private void SalirActionPerformed (ActionEvent o){
				dispose();
			}

		});
		
		JLabel labelusuarios = new JLabel("");
		labelusuarios.setIcon(new ImageIcon("src/images/users.png"));
		labelusuarios.setBounds(282, 0, 257, 389);
		contentPanel.add(labelusuarios);
		
		
		txtCamposObligatorios = new JTextField();
		txtCamposObligatorios.setOpaque(false);
		txtCamposObligatorios.setForeground(Color.RED);
		txtCamposObligatorios.setText("*  Campos obligatorios");
		txtCamposObligatorios.setBounds(34, 346, 188, 20);
		contentPanel.add(txtCamposObligatorios);
		txtCamposObligatorios.setEditable(false);
		txtCamposObligatorios.setColumns(10);
		
		comboBoxTipo = new JComboBox();
		comboBoxTipo.setModel(new DefaultComboBoxModel(new String[] {"S\u00ED", "No"}));
		comboBoxTipo.setBounds(148, 164, 140, 20);
		contentPanel.add(comboBoxTipo);
		
		JLabel lblCodigoCurso = new JLabel("Codigo Curso");
		lblCodigoCurso.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblCodigoCurso.setForeground(Color.BLACK);
		lblCodigoCurso.setBounds(24, 198, 86, 14);
		contentPanel.add(lblCodigoCurso);
		
		textFieldCodCurso = new JTextField();
		textFieldCodCurso.setHorizontalAlignment(SwingConstants.CENTER);
		textFieldCodCurso.setBounds(148, 195, 140, 20);
		contentPanel.add(textFieldCodCurso);
		textFieldCodCurso.setColumns(10);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBackground(new Color(255, 250, 205));
		scrollPane.setBounds(24, 230, 270, 68);
		contentPanel.add(scrollPane);
		
		tableCursos = new JTable(){
			public boolean isCellEditable(int rowIndex, int vColIndex) {
	            return false; //Deshabilitación de Celdas
		}};
		
		tableCursos.setBackground(new Color(255, 250, 205));
		scrollPane.setViewportView(tableCursos);
		
		preparartablaCursos();
		
		JLabel labelImagen = new JLabel("");
		labelImagen.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		labelImagen.setBounds(0, 0, 539, 389);
		labelImagen.setIcon(new ImageIcon("src/images/fondonotas.jpg"));
		contentPanel.add(labelImagen);
		
	}
	
	protected void btnCrearMonitoresActionPerformed (ActionEvent o){
		try{
			
			String dnimonitor, nombre, apellidos;
			int nomina;
			int telefono;
			String cod_curso;
			dnimonitor=textFieldDni.getText();
			nombre=textFieldNombre.getText();
			apellidos=textFieldApellidos.getText();
			telefono=Integer.parseInt(textFieldTeleefono.getText());
			cod_curso=textFieldCodCurso.getText();
			
		if(comboBoxTipo.getSelectedItem().toString().equalsIgnoreCase("No")){
				nomina=0;
				cod_curso = ""; 
				
				if (textFieldCodCurso.getText().equals("")){
				 	JOptionPane.showMessageDialog(null,"El campo cod_ curso esta vacio, debe rellenarlo obligatoriamente");
				 } else {
					 
					 Statement prest1=(Statement) conx.getConectado().createStatement();
					 ResultSet rs = prest1.executeQuery("SELECT * FROM cursos WHERE cod_curso = '"+textFieldCodCurso.getText()+"'");
					 
					 
					 
					 if (rs.first()) {
						 try{
						 crearmonitor.CrearMonitor(dnimonitor, nombre, apellidos, telefono, nomina);
						 
						 }catch (Exception e) {
							JOptionPane.showMessageDialog(null, "Posible fallo, el curso al que intenta registrar está ocupado por otro Monitor");
						}
							JOptionPane.showMessageDialog(null, "Monitor creado con éxito");
							dispose();
							
					 } else {
						 JOptionPane.showInternalMessageDialog(null, "No existe el curso");
					 }
				 }
			}else{
				

				nomina=1;

				
				if (textFieldCodCurso.getText().equals("")) {
					crearmonitor.CrearMonitor(dnimonitor, nombre, apellidos, telefono, nomina);
					JOptionPane.showMessageDialog(null, "Monitor creado con éxito");
					dispose();
				} else {
					 Statement prest1=(Statement) conx.getConectado().createStatement();
					 ResultSet rs = prest1.executeQuery("SELECT * FROM cursos WHERE cod_curso = '"+textFieldCodCurso.getText()+"'");
					 
					 if (rs.first()) {
						 
						 crearmonitor.CrearMonitor(dnimonitor, nombre, apellidos, telefono, nomina);
							JOptionPane.showMessageDialog(null, "Monitor creado con éxito");
							dispose();
							
					 } else {
						 JOptionPane.showInternalMessageDialog(null, "No existe el curso");
					 }
				}
				
			
			}
			
			if(dnimonitor.length()<=0 || telefono<=0) {
				JOptionPane.showMessageDialog(null, "El dni del monitor, la nomina y el telefono, son campos obligatorios");
			}else{
				
			}
			
			}catch(SQLException exSql){
				JOptionPane.showMessageDialog(null, "Error, posibles causas: \n- Ya existe un Monitor con ese Dni \n- Asegúrese de tener el host activo");
			}catch(Exception e){
				e.printStackTrace();
			    JOptionPane.showMessageDialog(null, "Tiene que rellenar todos los campos obligatorios","Error",JOptionPane.ERROR_MESSAGE);
		}
		
	}
	
	
	public void preparartablaCursos() {
		try{
			
			DefaultTableModel m;
			
			String titulos[] = {"Id","Nombre","Plazas Restantes"};
			m = new DefaultTableModel(null,titulos);
			
			TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(m);
			tableCursos.setRowSorter(sorter);
	     	
			DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
			tcr.setHorizontalAlignment(SwingConstants.CENTER);
		
			String fila[]=new String[titulos.length];
			tableCursos.setModel(m);
			
			ResultSet resultSql = crearmonitor.prepararTablaCursos();
			
			while(resultSql.next()){
					fila[0]=resultSql.getString("cod_curso");
					fila[1]=resultSql.getString("nombrecurso");
					fila[2]=resultSql.getString("Plazas_Libres");
					
					
					m.addRow(fila);
			}
			crearmonitor.prepararTablaCursos();
			int i;
			i=0;
			while(i<titulos.length){
				tableCursos.getColumnModel().getColumn(i).setCellRenderer(tcr);
				i++;
			}
		}catch(Exception e){
			JOptionPane.showMessageDialog(null, "Error al extraer los datos de la tabla");
		}
		
	}
	
}

