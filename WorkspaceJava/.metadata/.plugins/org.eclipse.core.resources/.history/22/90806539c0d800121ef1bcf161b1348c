package VistasFinales;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import javax.swing.ImageIcon;
import javax.swing.border.LineBorder;

import VistasFinales.*;

import conexiones.*;

import modelo.*;



public class GestionMonitoresyAlumnos extends JFrame {

	public JPanel contentPane;
	public JTable tablaAlumnos;
	public JTable tablaMonitores;
	public JButton btnAtrs;
	public JButton btnCrearAlumno;
	public JButton btnModificarAlumno;
	public JButton btnRefrescarAlumno;
	public JButton btnEliminarAlumno;
	public JButton btnCrearMonitor;
	public JButton btnModificarMonitor;
	public JButton btnRefrescarMonitor;
	public JButton btnEliminarMonitor; 
	
	public Conexion conx=new Conexion();
	
	public ModeloAlumnosyMonitores alummoni;
	
	public GestionMonitoresyAlumnos() throws IOException, SQLException {
		setIconImage(Toolkit.getDefaultToolkit().getImage("src/Images/admin.png"));
		setUndecorated(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 947, 568);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		setResizable(false);
		setLocationRelativeTo(null);
		
		
		alummoni= new ModeloAlumnosyMonitores();
		///---------------------///
		
		
		btnAtrs = new JButton("Atr\u00E1s");
		btnAtrs.setMnemonic('x');
		btnAtrs.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnAtrs.setIcon(new ImageIcon("src/images/return.png"));
		btnAtrs.setBounds(796, 506, 112, 37);
		contentPane.add(btnAtrs);
		btnAtrs.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				dispose();
			}
		});
		
		
 //----------------- Zona Alumnos ------------------
		
		JLabel lblAlumnos = new JLabel("Alumnos ");
		lblAlumnos.setHorizontalAlignment(SwingConstants.CENTER);
		lblAlumnos.setFont(new Font("Rockwell Condensed", Font.BOLD | Font.ITALIC, 16));
		lblAlumnos.setBounds(42, 11, 666, 23);
		contentPane.add(lblAlumnos);
		
		JScrollPane scrollPane3 = new JScrollPane();
		scrollPane3.setBackground(new Color(255, 250, 205));
		scrollPane3.setBounds(42, 45, 666, 170);
		contentPane.add(scrollPane3);
		

		tablaAlumnos = new JTable(){
			public boolean isCellEditable(int rowIndex, int vColIndex) {
	            return false; //Deshabilitación de Celdas
		}};
		tablaAlumnos.setBackground(new Color(255, 250, 205));
		tablaAlumnos.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
		scrollPane3.setViewportView(tablaAlumnos);
		tablaAlumnos.addMouseListener(new MouseListener() {
			public void mouseReleased(MouseEvent arg0) {
			}
			public void mousePressed(MouseEvent arg0) {
			}
			public void mouseClicked(MouseEvent arg0) {
				int filSel=tablaAlumnos.getSelectedRow();
			}
			public void mouseEntered(MouseEvent e) {
			}
			public void mouseExited(MouseEvent e) {
			}
		});
		prepararTablaAlumnos();
		
		btnCrearAlumno = new JButton("Crear");
		btnCrearAlumno.setMnemonic('c');
		btnCrearAlumno.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnCrearAlumno.setIcon(new ImageIcon("src/images/confirm.png"));
	
		btnCrearAlumno.setBounds(736, 58, 117, 29);
		contentPane.add(btnCrearAlumno);
		btnCrearAlumno.addActionListener(new ActionListener() {
			//LLAMA AL CONTROLADOR CREAR ALUMNO
			public void actionPerformed(ActionEvent arg0) {
				try {
					btnCrearAlumnoPerformed(arg0);
				} catch (IOException e) {
					
					e.printStackTrace();
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			}
			private void btnCrearAlumnoPerformed(ActionEvent arg0) throws IOException, SQLException {
				CrearAlumnos ca=new CrearAlumnos();
				ca.setVisible(true);
			}
		});
		
		btnModificarAlumno = new JButton("Modificar");
		btnModificarAlumno.setMnemonic('m');
		btnModificarAlumno.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnModificarAlumno.setIcon(new ImageIcon("src/images/modify.png"));
		btnModificarAlumno.setBounds(736, 94, 117, 29);
		contentPane.add(btnModificarAlumno);
		//LLAMAR AL CONTROLADOR MODIFICAR ALUMNO
		btnModificarAlumno.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try {
					btnModificarAlumno(arg0);
				} catch (IOException e) {
				
					e.printStackTrace();
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			}
		});
		
		btnRefrescarAlumno = new JButton("Refrescar");
		btnRefrescarAlumno.setMnemonic('r');
		btnRefrescarAlumno.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnRefrescarAlumno.setIcon(new ImageIcon("src/images/refresh.png"));
		btnRefrescarAlumno.setBounds(736, 163, 117, 29);
		contentPane.add(btnRefrescarAlumno);
		setLocationRelativeTo(null);
		
		// Actualizar los datos cuando se hayan modificado o creado usuarios
		btnRefrescarAlumno.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				btnRefrescarPerformed(arg0);
			}
			private void btnRefrescarPerformed(ActionEvent arg0) {
				prepararTablaAlumnos();
			}
		});
		
		
		btnEliminarAlumno = new JButton("Eliminar");
		btnEliminarAlumno.setMnemonic('e');
		btnEliminarAlumno.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnEliminarAlumno.setIcon(new ImageIcon("src/images/adiooos.png"));
		btnEliminarAlumno.setBounds(736, 128, 117, 29);
		contentPane.add(btnEliminarAlumno);
		//LLAMA AL CONTROLADOR ELIMINAR ALUMNO
		btnEliminarAlumno.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				btnEliminarAlumnoPerformed(arg0);
			}
		});
		
 //--------------- Zona Monitores -----------------------------------------------------------------------
		
		JLabel lblMonitores = new JLabel("Monitores");
		lblMonitores.setHorizontalAlignment(SwingConstants.CENTER);
		lblMonitores.setFont(new Font("Rockwell Condensed", Font.BOLD | Font.ITALIC, 16));
		lblMonitores.setBounds(42, 270, 666, 23);
		contentPane.add(lblMonitores);
		
		btnCrearMonitor = new JButton("Crear");
		btnCrearMonitor.setMnemonic('a');
		btnCrearMonitor.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnCrearMonitor.setIcon(new ImageIcon("src/images/confirm.png"));
		btnCrearMonitor.setBounds(736, 321, 117, 29);
		contentPane.add(btnCrearMonitor);
		//LLAMA AL CONTROLADOR CREARMONITOR
		btnCrearMonitor.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				CrearMonitores cm;
				try {
					cm = new CrearMonitores();
					cm.setVisible(true);
				} catch (IOException e1) {
					
					e1.printStackTrace();
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		});
		
		btnModificarMonitor = new JButton("Modificar");
		btnModificarMonitor.setMnemonic('o');
		btnModificarMonitor.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnModificarMonitor.setIcon(new ImageIcon("src/images/modify.png"));
		//LLAMA AL CONTROLADOR MODIFICAR MONITOR
		btnModificarMonitor.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					btnModificarMonitoresPerformed(e);
				} catch (IOException e1) {
				
					e1.printStackTrace();
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
			}
		});
		btnModificarMonitor.setBounds(736, 355, 117, 29);
		contentPane.add(btnModificarMonitor);
		
		btnEliminarMonitor = new JButton("Eliminar");
		btnEliminarMonitor.setMnemonic('m');
		btnEliminarMonitor.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnEliminarMonitor.setIcon(new ImageIcon("src/images/adiooos.png"));
		
		//LLAMA AL CONTROLADOR ELIMINAR MONITOR
		btnEliminarMonitor.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try {
					btnEliminarMonitoresPerformed(arg0);
				} catch (SQLException e) {
					
					e.printStackTrace();
				} catch (IOException e) {
				
					e.printStackTrace();
				}
			}
		});
		btnEliminarMonitor.setBounds(736, 389, 117, 29);
		contentPane.add(btnEliminarMonitor);
		
		JScrollPane scrollPane2 = new JScrollPane();
		scrollPane2.setBackground(new Color(255, 250, 205));
		scrollPane2.setBounds(48, 307, 660, 170);
		contentPane.add(scrollPane2);
		
		
		tablaMonitores = new JTable(){
			public boolean isCellEditable(int rowIndex, int vColIndex) {
	            return false; //Deshabilitación de Celdas
		}};
		tablaMonitores.setBackground(new Color(255, 250, 205));
		tablaMonitores.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
		scrollPane2.setViewportView(tablaMonitores);
		
		prepararTablaMonitores();
		
		btnRefrescarMonitor = new JButton("Refrescar");
		btnRefrescarMonitor.setMnemonic('s');
		btnRefrescarMonitor.setBorder(new LineBorder(new Color(0, 0, 0), 1, true));
		btnRefrescarMonitor.setIcon(new ImageIcon("src/images/refresh.png"));
		btnRefrescarMonitor.setBounds(736, 423, 117, 29);
		contentPane.add(btnRefrescarMonitor);
		
		JLabel label = new JLabel("");
		label.setIcon(new ImageIcon("src\\images\\fondoverde.jpg"));
		label.setBounds(0, 0, 947, 568);
		contentPane.add(label);
		
		JButton btnExportar = new JButton("Exportar");
		btnExportar.setBounds(52, 236, 89, 23);
		contentPane.add(btnExportar);
		
		//REALIZA REFRESCO DE TABLA
		btnRefrescarMonitor.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				prepararTablaMonitores();
			}
		});
		
	}
	
	//-------- Zona Acciones Alumnos ------------
	
	private void btnModificarAlumno(ActionEvent arg0) throws IOException, SQLException {
		
		int fselAlumnos=tablaAlumnos.getSelectedRow();
		String datosFilaAlum[]= new String[tablaAlumnos.getColumnCount()]; 
		
		if(fselAlumnos==-1){
			JOptionPane.showMessageDialog(null, "Selecciona una fila");
		}else{
			
			//Recojo los datos de las columnas que necesito de la fila seleccionada, los paso
			//a un array y lo paso al constructor del Jdialog ModificarMaterial para iniciarlizarlos para la modificación
			// en sus textfields Correspondientes
			datosFilaAlum[0]=(String)tablaAlumnos.getValueAt(fselAlumnos, 0);//DNI
			datosFilaAlum[1]=(String)tablaAlumnos.getValueAt(fselAlumnos, 1);//Nombre
			datosFilaAlum[2]=(String)tablaAlumnos.getValueAt(fselAlumnos, 2);//Apellido
			datosFilaAlum[3]=(String)tablaAlumnos.getValueAt(fselAlumnos, 3);//Dirección
			datosFilaAlum[4]=(String)tablaAlumnos.getValueAt(fselAlumnos, 4);//Edad
			datosFilaAlum[5]=(String)tablaAlumnos.getValueAt(fselAlumnos, 5);//cod_curso
			
		
			ModificarAlumno ma;
			try {
				ma = new ModificarAlumno(datosFilaAlum);
				ma.setVisible(true);
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		
		}
		
		
	}
	
	protected void btnEliminarAlumnoPerformed(ActionEvent arg0) {
		try{
			
			
			int filsel;
			String dni;
			int r;
			filsel=tablaAlumnos.getSelectedRow();
			
			if(filsel==-1){
				JOptionPane.showMessageDialog(null, "Selecciona el Alumno");
			}else{
				
				dni=(String) tablaAlumnos.getValueAt(filsel, 0);
				r=JOptionPane.showConfirmDialog(null, "¿Desea eliminar el Alumno seleccionado con Dni: "+dni+"?","Eliminar",JOptionPane.YES_NO_OPTION);
				if(r==JOptionPane.YES_OPTION){
					alummoni.EliminarAlumnos(dni);
					prepararTablaAlumnos();
				}
			}
		}catch(SQLException e){
			JOptionPane.showMessageDialog(null,"Error al borrar la tupla.");
			JOptionPane.showMessageDialog(null, e.getCause());
		}catch(Exception ex){
			 JOptionPane.showMessageDialog(null, "Error en la conexión con la base de datos");
		}
		
	}
	

	public void prepararTablaAlumnos() {
		try{
			
			DefaultTableModel m;
			
			String titulos[] = {"DNI", "Nombre","Apellido","Dirección", "Edad","cod_curso"};
			m = new DefaultTableModel(null,titulos);
			
			TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(m);
			tablaAlumnos.setRowSorter(sorter);
	     	
			DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
			tcr.setHorizontalAlignment(SwingConstants.CENTER);
		
			String fila[]=new String[titulos.length];
			tablaAlumnos.setModel(m);
			
			ResultSet resultSql = alummoni.prepararTablaAlumnos();
			
			while(resultSql.next()){
					fila[0]=resultSql.getString("dni");
					fila[1]=resultSql.getString("nombre");
					fila[2]=resultSql.getString("apellido");
					fila[3]=resultSql.getString("direccion");
					fila[4]=resultSql.getString("edad");
					fila[5]=resultSql.getString("cod_curso");
					
					m.addRow(fila);
			}
			
			
			alummoni.prepararTablaAlumnos();
			int i=0;
			while(i<titulos.length){
				tablaAlumnos.getColumnModel().getColumn(i).setCellRenderer(tcr);
				i++;
			}
		}catch(Exception e){
			e.printStackTrace();
			JOptionPane.showMessageDialog(null, "Error al extraer los datos de la tabla");
		}
	}
	
	//-------- Zona acciones Monitores ----------
		protected void btnModificarMonitoresPerformed(ActionEvent e) throws IOException, SQLException {
			int fselMonitores=tablaMonitores.getSelectedRow();
			String datosFilaMonitores[]= new String[tablaMonitores.getColumnCount()]; 
			
			if(fselMonitores==-1){
				JOptionPane.showMessageDialog(null, "Selecciona una fila");
			}else{
				
				//Recojo los datos de las columnas que necesito de la fila seleccionada, los paso
				//a un array y lo paso al constructor del Jdialog ModificarMaterial para iniciarlizarlos para la modificación
				// en sus textfields Correspondientes
				datosFilaMonitores[0]=(String)tablaMonitores.getValueAt(fselMonitores, 0);//dnimonitor
				datosFilaMonitores[1]=(String)tablaMonitores.getValueAt(fselMonitores, 1);//nombre
				datosFilaMonitores[2]=(String)tablaMonitores.getValueAt(fselMonitores, 2);//apellidos
				datosFilaMonitores[3]=(String)tablaMonitores.getValueAt(fselMonitores, 3);//telefono
				datosFilaMonitores[4]=(String)tablaMonitores.getValueAt(fselMonitores, 4);//nomina
				
				
			
				ModificarMonitores mmon=new ModificarMonitores(datosFilaMonitores);
				mmon.setVisible(true);
			
			}
		}
		
		protected void btnEliminarMonitoresPerformed(ActionEvent arg0) throws SQLException, IOException {
			String dnimonitor;
			int filSelTd=tablaMonitores.getSelectedRow();
			int res;
			
			
			if(filSelTd==-1){
				JOptionPane.showMessageDialog(null, "Selecciona una fila");
			}else{
				dnimonitor=(String)tablaMonitores.getValueAt(filSelTd, 0);
				
					res=JOptionPane.showConfirmDialog(null, "¿Desea eliminar el monitor seleccionado con dni: "+dnimonitor+"?","Eliminar",JOptionPane.YES_NO_OPTION);
					if(res==JOptionPane.YES_OPTION){
						alummoni.EliminarMonitores(dnimonitor);
						JOptionPane.showMessageDialog(null,"Monitores eliminado con exito");
					}
					
					}
		}
		

		
			
		public void prepararTablaMonitores() {
			try{
				
				DefaultTableModel m;
				
				String titulos[] = {"DNI","Nombre","Apellidos","Teléfono","Nómina"};
				m = new DefaultTableModel(null,titulos);
				
				TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(m);
				tablaMonitores.setRowSorter(sorter);
		     	
				DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
				tcr.setHorizontalAlignment(SwingConstants.CENTER);
				
				ResultSet resultSql = alummoni.prepararTablaMonitores();
			
				String fila[]=new String[titulos.length];
				tablaMonitores.setModel(m);
				while(resultSql.next()){
						fila[0]=resultSql.getString("dnimonitor");
						fila[1]=resultSql.getString("nombre");
						fila[2]=resultSql.getString("apellidos");
						fila[3]=resultSql.getString("telefono");
						fila[4]=resultSql.getString("nomina");
						
						m.addRow(fila);
				}
				
				int i;
				i=0;
				while(i<titulos.length){
					tablaMonitores.getColumnModel().getColumn(i).setCellRenderer(tcr);
					i++;
				}
			}catch(Exception e){
				JOptionPane.showMessageDialog(null, "Error al extraer los datos de la tabla");
			}
		}
}
